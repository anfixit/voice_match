import gradio as gr
import traceback
import os
import tempfile
import librosa
import numpy as np
import matplotlib.pyplot as plt
from app.log import setup_logger
from app.voice_compare_dual import compare_voices_dual
from app.utils import convert_audio_to_wav

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–≥–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)
log = setup_logger("interface")


def visualize_audio(wav_path_1, wav_path_2):
    try:
        temp_fd, temp_img_path = tempfile.mkstemp(suffix=".png")
        os.close(temp_fd)

        y1, sr1 = librosa.load(wav_path_1, sr=None)
        y2, sr2 = librosa.load(wav_path_2, sr=None)

        fig, ax = plt.subplots(4, 2, figsize=(14, 16))

        # –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        D1 = librosa.amplitude_to_db(np.abs(librosa.stft(y1)), ref=np.max)
        D2 = librosa.amplitude_to_db(np.abs(librosa.stft(y2)), ref=np.max)
        librosa.display.specshow(D1, sr=sr1, hop_length=512, x_axis='time', y_axis='log', ax=ax[0, 0])
        ax[0, 0].set_title('–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ ‚Ññ1')
        librosa.display.specshow(D2, sr=sr2, hop_length=512, x_axis='time', y_axis='log', ax=ax[0, 1])
        ax[0, 1].set_title('–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ ‚Ññ2')

        # –≠–Ω–µ—Ä–≥–∏—è
        energy1 = librosa.feature.rms(y=y1)[0]
        energy2 = librosa.feature.rms(y=y2)[0]
        ax[1, 0].plot(energy1)
        ax[1, 0].set_title('–≠–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞ ‚Ññ1')
        ax[1, 1].plot(energy2)
        ax[1, 1].set_title('–≠–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞ ‚Ññ2')

        # Pitch
        pitch1, _ = librosa.piptrack(y=y1, sr=sr1)
        pitch2, _ = librosa.piptrack(y=y2, sr=sr2)
        ax[2, 0].imshow(pitch1, aspect='auto', origin='lower', cmap='coolwarm')
        ax[2, 0].set_title('Pitch ‚Ññ1')
        ax[2, 1].imshow(pitch2, aspect='auto', origin='lower', cmap='coolwarm')
        ax[2, 1].set_title('Pitch ‚Ññ2')

        # MFCC
        mfcc1 = librosa.feature.mfcc(y=y1, sr=sr1, n_mfcc=13)
        mfcc2 = librosa.feature.mfcc(y=y2, sr=sr2, n_mfcc=13)
        librosa.display.specshow(mfcc1, x_axis='time', ax=ax[3, 0])
        ax[3, 0].set_title('MFCC ‚Ññ1')
        librosa.display.specshow(mfcc2, x_axis='time', ax=ax[3, 1])
        ax[3, 1].set_title('MFCC ‚Ññ2')

        plt.tight_layout()
        plt.savefig(temp_img_path)
        plt.close()

        return temp_img_path
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None


def process_files(file1_path, file2_path):
    try:
        if not file1_path or not file2_path:
            return "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞.", "", None

        for file_path in [file1_path, file2_path]:
            if not os.path.exists(file_path):
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.", "", None

            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            if file_size_mb > 20:
                return f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë", None

        try:
            wav1_path, log1 = convert_audio_to_wav(file1_path)
            wav2_path, log2 = convert_audio_to_wav(file2_path)
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}", "", None

        for wav_path in [wav1_path, wav2_path]:
            if not os.path.exists(wav_path):
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {wav_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.", "", None

        viz_path = visualize_audio(wav1_path, wav2_path)

        result_msg, summary = compare_voices_dual(wav1_path, wav2_path)

        log_output = (
            f"üìÇ –§–∞–π–ª 1: {os.path.basename(file1_path)}\n"
            f"{log1}\n\n"
            f"üìÇ –§–∞–π–ª 2: {os.path.basename(file2_path)}\n"
            f"{log2}\n\n"
            f"{summary}"
        )

        return result_msg, log_output, viz_path

    except Exception as exc:
        log.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
        log.debug(traceback.format_exc())
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.", str(exc), None


def launch_ui():
    description_text = (
        "üéß <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> .wav, .mp3, .m4a, .flac, .ogg<br>"
        "‚öôÔ∏è <b>–ê–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b> –∞—É–¥–∏–æ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ WAV (16kHz, mono)<br>"
        "‚è±Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞:</b> –æ—Ç 5 —Å–µ–∫ –¥–æ 1 –º–∏–Ω. –ú—É–∑—ã–∫–∞ –∏ —à—É–º—ã –º–æ–≥—É—Ç –∏—Å–∫–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.<br>"
        "üß† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è:</b> ECAPA, Resemblyzer, X-vector –∏ –¥—Ä."
    )

    with gr.Blocks(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤") as demo:
        gr.Markdown(f"### üéôÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ (voice_match)\n{description_text}", elem_id="intro")

        with gr.Row():
            file1 = gr.Audio(label="üîà –ì–æ–ª–æ—Å ‚Ññ1", type="filepath")
            file2 = gr.Audio(label="üîâ –ì–æ–ª–æ—Å ‚Ññ2", type="filepath")

        with gr.Row():
            compare_button = gr.Button("üîç –°—Ä–∞–≤–Ω–∏—Ç—å", interactive=True)
            clear_button = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", interactive=True)

        with gr.Row():
            result = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        with gr.Row():
            log_output = gr.Textbox(label="–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", lines=8)
        with gr.Row():
            visualization = gr.Image(label="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º", type="filepath")

        compare_button.click(
            fn=process_files,
            inputs=[file1, file2],
            outputs=[result, log_output, visualization]
        )

        clear_button.click(
            fn=lambda: ("", "", None),
            inputs=[],
            outputs=[result, log_output, visualization]
        )

        gr.Markdown(
            "üìÑ <a href='https://github.com/anfixit/voice_match' target='_blank'>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ GitHub</a>",
            elem_id="footer"
        )

    demo.launch(share=False, debug=True, max_threads=1)
